{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Description": "Create a small Splunk cluster.with a dynamic number of indexers.",
 "Parameters": {
  "InstanceType": {
   "Description": "Splunk EC2 instance type",
   "Type": "String",
   "Default": "c4.4xlarge",
   "AllowedValues": [
    "c4.2xlarge",
    "c4.4xlarge",
    "c4.8xlarge"
   ],
   "ConstraintDescription": "must be a valid EC2 instance type."
  },
  "SplunkAdminPassword": {
   "Description": "Admin password for Splunk. (8-32 characters, alphanumeric only",
   "Type": "String",
   "MinLength": "8",
   "MaxLength": "32",
   "AllowedPattern": "[a-zA-Z0-9]*",
   "ConstraintDescription": "Must be alphanumeric only.  8-32 characters"
  },
  "LicenseURL": {
   "Description": "URL to download Splunk License. (any web URL - e.g.: https://<s3 location>)",
   "Type": "String",
   "AllowedPattern": "(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
   "ConstraintDescription": "must be a valid URL - s3 URL mention..."
  },
  "KeyName": {
   "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
   "Type": "String",
   "MinLength": "1",
   "MaxLength": "255",
   "AllowedPattern": "[\\x20-\\x7E]*",
   "ConstraintDescription": "can contain only ASCII characters."
  },
  "SSHLocation": {
   "Description": " The IP address range that is allowed to SSH to the EC2 instances",
   "Type": "String",
   "MinLength": "9",
   "MaxLength": "19",
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP range in x.x.x.x/x notation.  Use 0.0.0.0/0 for no restrictions."
  },
  "SplunkIndexerCount": {
   "Description": "How many Splunk indexers to launch.  [1-10]",
   "Type": "Number",
   "MinValue": "1",
   "MaxValue": "10",
   "Default": "3",
   "ConstraintDescription": "must be a valid number, 1-10"
  },
  "VPCCIDR": {
   "Description": "The address space that will be assigned to the entire VPC where Splunk will reside. (Recommend at least a /16)",
   "Type": "String",
   "MinLength": "9",
   "MaxLength": "19",
   "Default": "10.0.0.0/16",
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
  },
  "SplunkSubnetCIDR": {
   "Description": "The address space that will be assigned specifically to the Splunk server subnet. (x.x.x.x/x notation)",
   "Type": "String",
   "MinLength": "9",
   "MaxLength": "19",
   "Default": "10.0.0.0/24",
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
  }
 },
 "Mappings": {
  "RegionMap": {
   "us-west-2": {
    "AMI": "ami-b7534987"
   },
   "us-west-1": {
    "AMI": "ami-d54d8a91"
   },
   "us-east-1": {
    "AMI": "ami-431e5a26"
   },
   "eu-central-1": {
    "AMI": "ami-98202285"
   },
   "eu-west-1": {
    "AMI": "ami-8f2c06f8"
   },
   "ap-southeast-1": {
    "AMI": "ami-f8a3b4aa"
   },
   "ap-southeast-2": {
    "AMI": "ami-6bb5fc51"
   },
   "ap-northeast-1": {
    "AMI": "ami-eada44ea"
   },
   "sa-east-1": {
    "AMI": "ami-c79a0dda"
   }
  }
 },
 "Resources": {
  "VPC": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": {
     "Ref": "VPCCIDR"
    },
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     }
    ]
   }
  },
  "SplunkSubnet": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "VPC"
    },
    "MapPublicIpOnLaunch": "true",
    "CidrBlock": {
     "Ref": "SplunkSubnetCIDR"
    },
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     }
    ]
   }
  },
  "InternetGateway": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     }
    ]
   }
  },
  "AttachGateway": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "VpcId": {
     "Ref": "VPC"
    },
    "InternetGatewayId": {
     "Ref": "InternetGateway"
    }
   }
  },
  "RouteTable": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "VPC"
    },
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     }
    ]
   }
  },
  "Route": {
   "Type": "AWS::EC2::Route",
   "DependsOn": "AttachGateway",
   "Properties": {
    "RouteTableId": {
     "Ref": "RouteTable"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "InternetGateway"
    }
   }
  },
  "SubnetRouteTableAssociation": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "SubnetId": {
     "Ref": "SplunkSubnet"
    },
    "RouteTableId": {
     "Ref": "RouteTable"
    }
   }
  },
  "SplunkNetworkAcl": {
   "Type": "AWS::EC2::NetworkAcl",
   "Properties": {
    "VpcId": {
     "Ref": "VPC"
    },
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     }
    ]
   }
  },
  "InboundSplunkSearchHeadACL": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": {
     "Ref": "SplunkNetworkAcl"
    },
    "RuleNumber": "100",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": {
     "From": "8000",
     "To": "8000"
    }
   }
  },
  "InboundSSHACL": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": {
     "Ref": "SplunkNetworkAcl"
    },
    "RuleNumber": "101",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": {
     "Ref": "SSHLocation"
    },
    "PortRange": {
     "From": "22",
     "To": "22"
    }
   }
  },
  "InboundSyslogACL": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": {
     "Ref": "SplunkNetworkAcl"
    },
    "RuleNumber": "102",
    "Protocol": "17",
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": {
     "Ref": "SSHLocation"
    },
    "PortRange": {
     "From": "514",
     "To": "514"
    }
   }
  },
  "InboundResponsePortsACL": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": {
     "Ref": "SplunkNetworkAcl"
    },
    "RuleNumber": "103",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": {
     "From": "1024",
     "To": "65535"
    }
   }
  },
  "OutBoundHTTPACL": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": {
     "Ref": "SplunkNetworkAcl"
    },
    "RuleNumber": "104",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": {
     "From": "80",
     "To": "80"
    }
   }
  },
  "OutBoundHTTPSACL": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": {
     "Ref": "SplunkNetworkAcl"
    },
    "RuleNumber": "105",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": {
     "From": "443",
     "To": "443"
    }
   }
  },
  "OutBoundSSHACL": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": {
     "Ref": "SplunkNetworkAcl"
    },
    "RuleNumber": "106",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": {
     "From": "22",
     "To": "22"
    }
   }
  },
  "OutBoundResponsePortsACL": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": {
     "Ref": "SplunkNetworkAcl"
    },
    "RuleNumber": "107",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": {
     "From": "1024",
     "To": "65535"
    }
   }
  },
  "SubnetNetworkAclAssociation": {
   "Type": "AWS::EC2::SubnetNetworkAclAssociation",
   "Properties": {
    "SubnetId": {
     "Ref": "SplunkSubnet"
    },
    "NetworkAclId": {
     "Ref": "SplunkNetworkAcl"
    }
   }
  },
  "SplunkSearchHeadSecurityGroup": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "VpcId": {
     "Ref": "VPC"
    },
    "GroupDescription": "Enable port 8000 for Splunk web interface",
    "SecurityGroupIngress": [
     {
      "IpProtocol": "tcp",
      "FromPort": "8000",
      "ToPort": "8000",
      "CidrIp": {
       "Ref": "SSHLocation"
      }
     }
    ]
   }
  },
  "SplunkSecurityGroup": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "VpcId": {
     "Ref": "VPC"
    },
    "GroupDescription": "Enable SSH, and all Splunk-related ports except web interface",
    "SecurityGroupIngress": [
     {
      "IpProtocol": "tcp",
      "FromPort": "22",
      "ToPort": "22",
      "CidrIp": {
       "Ref": "SSHLocation"
      }
     },
     {
      "IpProtocol": "tcp",
      "FromPort": "8089",
      "ToPort": "8089",
      "CidrIp": {
       "Ref": "VPCCIDR"
      }
     },
     {
      "IpProtocol": "tcp",
      "FromPort": "9997",
      "ToPort": "9997",
      "CidrIp": {
       "Ref": "VPCCIDR"
      }
     },
     {
      "IpProtocol": "tcp",
      "FromPort": "9997",
      "ToPort": "9997",
      "CidrIp": {
       "Ref": "SSHLocation"
      }
     },
     {
      "IpProtocol": "tcp",
      "FromPort": "9997",
      "ToPort": "9997",
      "CidrIp": {
       "Ref": "SSHLocation"
      }
     },
     {
      "IpProtocol": "udp",
      "FromPort": "514",
      "ToPort": "514",
      "CidrIp": {
       "Ref": "VPCCIDR"
      }
     }
    ]
   }
  },
  "SplunkSearchHeadInstance": {
   "Type": "AWS::EC2::Instance",
   "DependsOn": "LicenseServerInstance",
   "Properties": {
    "ImageId": {
     "Fn::FindInMap": [
      "RegionMap",
      {
       "Ref": "AWS::Region"
      },
      "AMI"
     ]
    },
    "SecurityGroupIds": [
     {
      "Ref": "SplunkSecurityGroup"
     },
     {
      "Ref": "SplunkSearchHeadSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "SplunkSubnet"
    },
    "InstanceType": {
     "Ref": "InstanceType"
    },
    "KeyName": {
     "Ref": "KeyName"
    },
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     },
     {
      "Key": "role",
      "Value": "splunksearch"
     },
     {
      "Key": "Name",
      "Value": "splunksearch"
     }
    ],
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "VolumeSize": "100"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash -v\n",
        "/sbin/service splunk stop\n",
        "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
        "export INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
        "printf '%s\t%s\n' \"$LOCALIP\" 'splunksearch' >> /etc/hosts\n",
        "hostname splunksearch\n",
        "mv /opt/splunk/etc/passwd /opt/splunk/etc/passwd.bak\n",
        "mkdir -p /opt/splunk/.splunk ; chown splunk:splunk /opt/splunk/.splunk\n",
        "mkdir -p /opt/splunk/etc/licenses/enterprise\n",
        "usermod --expiredate 1 splunk\n",
        "/opt/splunk/bin/splunk enable boot-start -user splunk --accept-license\n",
        "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
        "wget -O /opt/splunk/etc/licenses/enterprise/splunk.license ",
        {
         "Ref": "LicenseURL"
        },
        " \n",
        "/opt/splunk/bin/splunk start --accept-license\n",
        "HOME=/opt/splunk /opt/splunk/bin/splunk edit user admin -password ",
        {
         "Ref": "SplunkAdminPassword"
        },
        " -role admin -auth admin:changeme\n",
        "touch /opt/splunk/etc/.ui_login\n",
        "/opt/splunk/bin/splunk edit licenser-localslave -master_uri 'https://",
        {
         "Fn::GetAtt": [
          "LicenseServerInstance",
          "PrivateIp"
         ]
        },
        ":8089' -auth admin:",
        {
         "Ref": "SplunkAdminPassword"
        },
        "\n",
        "/opt/splunk/bin/splunk restart\n"
       ]
      ]
     }
    }
   }
  },
  "LicenseServerInstance": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "ImageId": {
     "Fn::FindInMap": [
      "RegionMap",
      {
       "Ref": "AWS::Region"
      },
      "AMI"
     ]
    },
    "SecurityGroupIds": [
     {
      "Ref": "SplunkSecurityGroup"
     },
     {
      "Ref": "SplunkSearchHeadSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "SplunkSubnet"
    },
    "InstanceType": "c3.xlarge",
    "KeyName": {
     "Ref": "KeyName"
    },
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     },
     {
      "Key": "role",
      "Value": "splunklicense"
     },
     {
      "Key": "Name",
      "Value": "splunklicense"
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash -v\n",
        "/sbin/service splunk stop\n",
        "usermod --expiredate 1 splunk\n",
        "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
        "export INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null)\n",
        "hostname splunklicense\n",
        "printf '%s\t%s\n' \"$LOCALIP\" 'splunklicense' >> /etc/hosts\n",
        "mv /opt/splunk/etc/passwd /opt/splunk/etc/passwd.bak\n",
        "mkdir -p /opt/splunk/etc/licenses/enterprise\n",
        "mkdir -p /opt/splunk/.splunk ; chown splunk:splunk /opt/splunk/.splunk\n",
        "/opt/splunk/bin/splunk enable boot-start -user splunk --accept-license\n",
        "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
        "wget -O /opt/splunk/etc/licenses/enterprise/splunk.license ",
        {
         "Ref": "LicenseURL"
        },
        " \n",
        "/opt/splunk/bin/splunk start --accept-license\n",
        "HOME=/opt/splunk && /opt/splunk/bin/splunk edit user admin -password ",
        {
         "Ref": "SplunkAdminPassword"
        },
        " -role admin -auth admin:changeme\n",
        "touch /opt/splunk/etc/.ui_login\n",
        "/opt/splunk/bin/splunk add licenses /opt/splunk/etc/licenses/enterprise/splunk.license\n"
       ]
      ]
     }
    }
   }
  },
  "SplunkSearchIP": {
   "Type": "AWS::EC2::EIP",
   "DependsOn": "AttachGateway",
   "Properties": {
    "Domain": "vpc",
    "InstanceId": {
     "Ref": "SplunkSearchHeadInstance"
    }
   }
  },
  "SplunkIndexerLaunchConfiguration": {
   "Type": "AWS::AutoScaling::LaunchConfiguration",
   "DependsOn": "SplunkSearchHeadInstance",
   "Properties": {
    "AssociatePublicIpAddress": true,
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "VolumeSize": "100"
      }
     }
    ],
    "SecurityGroups": [
     {
      "Ref": "SplunkSecurityGroup"
     }
    ],
    "ImageId": {
     "Fn::FindInMap": [
      "RegionMap",
      {
       "Ref": "AWS::Region"
      },
      "AMI"
     ]
    },
    "InstanceType": {
     "Ref": "InstanceType"
    },
    "KeyName": {
     "Ref": "KeyName"
    },
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash -v\n",
        "/sbin/service splunk stop\n",
        "usermod --expiredate 1 splunk\n",
        "mv /opt/splunk/etc/passwd /opt/splunk/etc/passwd.bak\n",
        "mkdir -p /opt/splunk/.splunk ; chown splunk:splunk /opt/splunk/.splunk\n",
        "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
        "printf '%s\t%s\n' \"",
        {
         "Fn::GetAtt": [
          "SplunkSearchHeadInstance",
          "PrivateIp"
         ]
        },
        "\" 'splunksearch' >> /etc/hosts\n",
        "/opt/splunk/bin/splunk enable boot-start -user splunk --accept-license\n",
        "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
        "/opt/splunk/bin/splunk start --accept-license\n",
        "HOME=/opt/splunk /opt/splunk/bin/splunk edit user admin -password ",
        {
         "Ref": "SplunkAdminPassword"
        },
        " -role admin -auth admin:changeme\n",
        "sleep 30 && curl -k -u admin:",
        {
         "Ref": "SplunkAdminPassword"
        },
        " https://",
        {
         "Fn::GetAtt": [
          "SplunkSearchHeadInstance",
          "PrivateIp"
         ]
        },
        ":8089/services/search/distributed/peers -d name=$LOCALIP:8089 -d remoteUsername=admin -d remotePassword=",
        {
         "Ref": "SplunkAdminPassword"
        },
        "\n",
        "/opt/splunk/bin/splunk edit licenser-localslave -master_uri 'https://",
        {
         "Fn::GetAtt": [
          "LicenseServerInstance",
          "PrivateIp"
         ]
        },
        ":8089' -auth admin:",
        {
         "Ref": "SplunkAdminPassword"
        },
        "\n",
        "/opt/splunk/bin/splunk restart\n"
       ]
      ]
     }
    }
   }
  },
  "SplunkIndexerNodesASG": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "VPCZoneIdentifier": [
     {
      "Ref": "SplunkSubnet"
     }
    ],
    "AvailabilityZones": [
     {
      "Fn::GetAtt": [
       "SplunkSubnet",
       "AvailabilityZone"
      ]
     }
    ],
    "LaunchConfigurationName": {
     "Ref": "SplunkIndexerLaunchConfiguration"
    },
    "MinSize": {
     "Ref": "SplunkIndexerCount"
    },
    "MaxSize": {
     "Ref": "SplunkIndexerCount"
    },
    "DesiredCapacity": {
     "Ref": "SplunkIndexerCount"
    },
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      },
      "PropagateAtLaunch": true
     },
     {
      "Key": "role",
      "Value": "indexer",
      "PropagateAtLaunch": true
     }
    ]
   }
  }
 },
 "Outputs": {
  "SearchHeadURL": {
   "Description": "Search Head URL",
   "Value": {
    "Fn::Join": [
     ":",
     [
      {
       "Ref": "SplunkSearchIP"
      },
      "8000"
     ]
    ]
   }
  },
  "LicenseServerURL": {
   "Description": "License Server URL",
   "Value": {
    "Fn::Join": [
     ":",
     [
      {
       "Fn::GetAtt": [
        "LicenseServerInstance",
        "PublicIp"
       ]
      },
      "8000"
     ]
    ]
   }
  },
  "Credentials": {
   "Description": "Admin credentials for Splunk search head URL",
   "Value": {
    "Fn::Join": [
     ":",
     [
      "admin",
      {
       "Ref": "SplunkAdminPassword"
      }
     ]
    ]
   }
  }
 }
}
